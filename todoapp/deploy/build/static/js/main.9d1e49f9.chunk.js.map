{"version":3,"sources":["service/useTodoService.js","components/TodoItem.js","components/ToDoList.js","App.jsx","reportWebVitals.js","index.js"],"names":["useTodoService","useState","todos","setTodos","loading","setLoading","useEffect","fetch","process","then","data","json","result","catch","error","console","log","message","TodoItem","props","todo","name","status","id","TodoList","allTodos","setAllTodos","className","onChange","e","newToods","filter","x","includes","target","value","map","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NA2BeA,MA1Bf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,qBAAU,WACRD,GAAW,GAEXE,MADUC,8BAEPC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJP,GAAW,GACXF,EAASS,MAEVC,OAAM,SAAAC,GACLC,QAAQC,IAAI,QAASF,EAAMG,SAC3BZ,GAAW,GACXF,EAAS,SAEZ,IAEI,CACLC,UACAF,U,eCXWgB,MAVf,SAAkBC,GAChB,IAAQC,EAASD,EAATC,KACR,OACE,+BACE,6BAAKA,EAAKC,OAEV,6BAAKD,EAAKE,WAHHF,EAAKG,KC8BHC,MA/Bf,WACE,MAA2BxB,IAAnBI,EAAR,EAAQA,QAASF,EAAjB,EAAiBA,MACjB,EAAgCD,mBAAS,IAAzC,mBAAOwB,EAAP,KAAiBC,EAAjB,KAIA,OAHApB,qBAAU,WACRoB,EAAYxB,KACX,CAACA,IAEF,sBAAKyB,UAAW,YAAhB,UACGvB,GAAW,8BAAM,YAClB,uBACEwB,SAAU,SAAAC,GACR,IAAIC,EAAW5B,EAAM6B,QAAO,SAAAC,GAAC,OAAIA,EAAEX,KAAKY,SAASJ,EAAEK,OAAOC,UAC1DT,EAAYI,MAGhB,gCACE,kCACE,+BACE,6BAAK,SACL,6BAAK,cAENL,GACCA,EAASW,KAAI,SAAAhB,GAAI,OACf,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKG,gBCbnBc,MAXf,WACE,OACE,sBAAKV,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,wCAEF,cAAC,EAAD,QCGSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9d1e49f9.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nfunction useTodoService() {\r\n  const [todos, setTodos] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    let url = process.env.REACT_APP_TODO_API_URL;\r\n    fetch(url)\r\n      .then(data => data.json())\r\n      .then(result => {\r\n        setLoading(false);\r\n        setTodos(result);\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error\", error.message);\r\n        setLoading(false);\r\n        setTodos([]);\r\n      });\r\n  }, []);\r\n\r\n  return {\r\n    loading,\r\n    todos\r\n  };\r\n}\r\n\r\nexport default useTodoService;\r\n","import React from \"react\";\r\n\r\nfunction TodoItem(props) {\r\n  const { todo } = props;\r\n  return (\r\n    <tr key={todo.id}>\r\n      <td>{todo.name}</td>\r\n\r\n      <td>{todo.status}</td>\r\n    </tr>\r\n  );\r\n}\r\nexport default TodoItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport useTodoService from \"../service/useTodoService\";\r\nimport \"../styles/style.css\";\r\nimport TodoItem from \"./TodoItem\";\r\nfunction TodoList() {\r\n  const { loading, todos } = useTodoService();\r\n  const [allTodos, setAllTodos] = useState([]);\r\n  useEffect(() => {\r\n    setAllTodos(todos);\r\n  }, [todos]);\r\n  return (\r\n    <div className={\"todo-list\"}>\r\n      {loading && <div>{\"loading\"}</div>}\r\n      <input\r\n        onChange={e => {\r\n          let newToods = todos.filter(x => x.name.includes(e.target.value));\r\n          setAllTodos(newToods);\r\n        }}\r\n      ></input>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>{\"Name\"}</th>\r\n            <th>{\"Status\"}</th>\r\n          </tr>\r\n          {allTodos &&\r\n            allTodos.map(todo => (\r\n              <TodoItem key={todo.id} todo={todo}></TodoItem>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport TodoList from \"./components/ToDoList\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Todo</h1>\r\n      </header>\r\n      <TodoList></TodoList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}